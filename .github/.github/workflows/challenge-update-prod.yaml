name: Challenge Update
on:
  pull_request:
    types: [closed]
    branches:
      prod
jobs:
  Update-Challenge:
    environment: prod
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      # Basic setup
      - uses: actions/checkout@v4.1.7
      - run: |-
          branch=${{github.head_ref}}
          tokens=(${branch//'/'/ })
          
          echo "category=${tokens[0]}" >> $GITHUB_ENV
          echo "challenge=${tokens[1]}" >> $GITHUB_ENV
          
      # Check for files
      - name: Check for Dockerfile
        id: check_dockerfile
        uses: andstor/file-existence-action@v3.0.0
        with:
          files: "challenges/${{ github.head_ref }}/Dockerfile"
      - name: Check for Static Folder
        id: check_static
        uses: andstor/file-existence-action@v3.0.0
        with:
          files: "challenges/${{ github.head_ref }}/static" 
      # Authentication
      - name: Authenticate with GCP
        id: gcp-auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ vars.workload_identity_provider_id }}
          project_id:  ${{ vars.project_id }}
          service_account: ${{ vars.ar_push_service_account }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: Docker Auth
        if: steps.check_dockerfile.outputs.files_exists == 'true'
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: ${{ steps.gcp-auth.outputs.access_token }}
          registry: ${{ vars.registry_hostname }}
      # Updating...
      - name: 'Build and Push Container'
        if: steps.check_dockerfile.outputs.files_exists == 'true'
        run: |-
          image="${{ vars.registry_hostname }}/${{ vars.project_id }}/${{ vars.registry_name }}/${{github.head_ref}}:latest"
          docker build -t $image "challenges/${{github.head_ref}}"
          docker push $image
          echo "image=$image" >> $GITHUB_ENV
      # For web
      - name: 'Web: Update Cloud Run'
        id: update_cloud_run
        if: steps.check_dockerfile.outputs.files_exists == 'true' && env.category == 'web'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ env.challenge }}'
          image: ${{ env.image }}
      # For other
      - name: 'Other: Update VM'
        if: steps.check_dockerfile.outputs.files_exists == 'true' && env.category != 'web'
        run: |-
          PORT_STR=""
          source "challenges/${{ github.head_ref }}/config.env"
          for port in ${PORTS[@]};
          do
            PORT_STR="$PORT_STR -p $port:$port"
          done;
          #TODO unsudo
          gcloud auth configure-docker us-central1-docker.pkg.dev
          gcloud compute ssh ${{ vars.challs_vm_name }} --zone=${{ vars.challs_vm_zone }} --command="sudo docker kill ${{ env.challenge }} || true; sudo docker rm ${{ env.challenge }} || true; sudo docker run --pull=always -d --name ${{ env.challenge }} $PORT_STR ${{ env.image }}"
      # For both
      - name: 'Update DNS'
        if: steps.check_dockerfile.outputs.files_exists == 'true'
        run: |-
          if [ ${{ env.category }} == 'web' ]; then
            hostname="$(echo ${{ steps.update_cloud_run.outputs.url }} | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/')."
            type='CNAME'
          else
            hostname=${{ vars.challs_vm_ip }}
            type='A'
          fi
          
          gcloud dns record-sets create "${{ env.challenge }}.${{ vars.dns_base_name }}" \
          --rrdatas="$hostname" \
          --type=$type --ttl=60 \
          --zone=${{ vars.dns_zone }} \
          || \
          gcloud dns record-sets update "${{ env.challenge }}.${{ vars.dns_base_name }}" \
          --rrdatas="$hostname" \
          --type=$type --ttl=60 \
          --zone=${{ vars.dns_zone }}
      - name: Upload Static Files
        if: steps.check_static.outputs.files_exists == 'true'
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: 'challenges/${{github.head_ref}}/static'
          destination: '${{vars.static_assets_bucket_name}}/${{github.head_ref}}'
      - name: Update CTFd
        run: |-
          ctfd_url="$(gcloud run services describe ctfd --region ${{ vars.region }} --format 'value(status.url)')"
          ./scripts/ctfduploader $ctfd_url "${{ secrets.ctfd_token }}" "${{ vars.static_assets_bucket_name }}" "challenges" "defaults.yaml"
